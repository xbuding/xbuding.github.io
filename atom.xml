<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://xbuding.github.io</id>
    <title>xbuding</title>
    <updated>2020-04-08T06:39:06.428Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://xbuding.github.io"/>
    <link rel="self" href="https://xbuding.github.io/atom.xml"/>
    <subtitle>DRY-你的问题主要是读书不多而想得太多</subtitle>
    <logo>https://xbuding.github.io/images/avatar.png</logo>
    <icon>https://xbuding.github.io/favicon.ico</icon>
    <rights>All rights reserved 2020, xbuding</rights>
    <entry>
        <title type="html"><![CDATA[《深入理解Java虚拟机JVM高级特性与最佳实践》的一个例子]]></title>
        <id>https://xbuding.github.io/post/lesslessshen-ru-li-jie-java-xu-ni-ji-jvm-gao-ji-te-xing-yu-zui-jia-shi-jian-greatergreater-de-yi-ge-li-zi/</id>
        <link href="https://xbuding.github.io/post/lesslessshen-ru-li-jie-java-xu-ni-ji-jvm-gao-ji-te-xing-yu-zui-jia-shi-jian-greatergreater-de-yi-ge-li-zi/">
        </link>
        <updated>2020-04-08T06:18:20.000Z</updated>
        <content type="html"><![CDATA[<h1 id="前言">前言</h1>
<p>最近在重温《深入理解Java虚拟机JVM高级特性与最佳实践》，看到3.6章的 <strong>内存分配与回收策略</strong> 的栗子中，发现了以前一直没注意的现象。</p>
<h3 id="看gc日志首先要理解gc日志-书中358-中已经说的很清楚了">看gc日志，首先要理解gc日志， 书中3.5.8 中已经说的很清楚了。</h3>
<pre><code>```
[GC (Allocation Failure) [DefNew: 6651K-&gt;258K(9216K), 0.0059252 secs] 6651K-&gt;6402K(19456K), 0.0059735 secs] [Times: user=0.01 sys=0.01, real=0.01 secs] 
```  
</code></pre>
<p>用本例的例子来粗略说明一下各参数的意义(解释来自书本)，</p>
<table>
<thead>
<tr>
<th>名词</th>
<th>解释</th>
</tr>
</thead>
<tbody>
<tr>
<td>GC</td>
<td>说明本次GC 是minor gc，如果是 full gc， 前面又有full 装饰。 <img src="https://image.runbarry.com/945e88da33d448e992bffd20bcc8368e" alt="微信图片_20190823114422.png" loading="lazy"></td>
</tr>
<tr>
<td>Allocation Failure</td>
<td>接下来的”[DefNew”、 “[Tenured”、“[Perm”表示GC发生的区域,这里显示的区域名称与使用的GC收集器是密切相关的,例如上面样例所使用的Serial收集器中的新生代名为“ Default New Generation”,所以显示的是“[DefNew”。如果是ParNew收集器,新生代名称就会变为“ [ParDew”,意为“ Parallel New Generation&quot;。如果采用 Parallel Scavenge收集器,那它配套的新生代称为“PSYoungGen”,老年代和永久代同理,名称也是由收集器决定的。</td>
</tr>
<tr>
<td>6651K-&gt;258K(9216K)</td>
<td>GC前该(DefNew)内存区域已使用容量-&gt;GC后该(DefNew)区域已使用容量（该内存区域总容量）</td>
</tr>
<tr>
<td>0.0059252</td>
<td>该内存区域GC耗时，单位是秒</td>
</tr>
<tr>
<td>6651K-&gt;6402K(19456K)</td>
<td>GC前Java堆已使用容量-&gt;GC后Java堆已使用容量（Java堆总容量）</td>
</tr>
<tr>
<td>0.0059735 secs</td>
<td>该内存区域GC耗时，单位是秒</td>
</tr>
<tr>
<td>Times: user=0.01 sys=0.01, real=0.01 secs</td>
<td>分别表示用户态耗时，内核态耗时和总耗时</td>
</tr>
</tbody>
</table>
<hr>
<p>分析下可以得出结论：</p>
<ol>
<li>该次GC新生代减少了 6651K-258K=6393K</li>
<li>堆区总共减少了 6651K-6402K=249K</li>
</ol>
<h3 id="测试代码">测试代码</h3>
<pre><code>public class GcTest {

    private static final int _1MB = 1024 * 1024;

    public static void testAllocation() {
        byte[] allocation1, allocation2, allocation3, allocation4;

        allocation1 = new byte[2 * _1MB];        
        allocation2 = new byte[2 * _1MB];
        allocation3 = new byte[2 * _1MB];
        allocation4 = new byte[4 * _1MB];

    }

    public static void main(String[] args) {
        testAllocation();
    }

}
</code></pre>
<h3 id="测试结果">测试结果</h3>
<p>由于测试环境的jdk是1.8所以要加行jvm参数指定垃圾回收。<br>
1. java -verbose:gc -Xms20M -Xmx20M -Xmn10M -XX:+PrintGCDetails -XX:SurvivorRatio=8 -XX:+UseParallelGC  GcTest（通过jvm参数指定 parallel scavenge收集器）<br>
2. java -verbose:gc -Xms20M -Xmx20M -Xmn10M -XX:+PrintGCDetails -XX:SurvivorRatio=8 -XX:+UseSerialGC GcTest (通过jvm参数指定serial收集器)<br>
---</p>
<p><strong>两个收集器的结果展示如下</strong>:</p>
<figure data-type="image" tabindex="1"><img src="https://image.runbarry.com/2971363d29a742438890a041544f45fd" alt="gc.png" loading="lazy"></figure>
<h3 id="结果分析">结果分析</h3>
<ol>
<li>通过-Xms20M -Xmx20M -Xmn10M -XX:SurvivorRatio=8，参数指定了java堆=20M不可变，并且新生代=10M。eden:survivor比例=8:1，从图片中的 eden、from和to中可以看出分别是 8M 1M 1M的大小，新生代总大小=eden+survivor(只加一survivor个)= 8M + 1M = 9M</li>
<li>-XX:+UseSerialGC 使用serial收集器
<ol>
<li>结果如下<pre><code>[GC (Allocation Failure) [DefNew: 6651K-&gt;258K(9216K), 0.0059252 secs] 6651K-&gt;6402K(19456K), 0.0059735 secs] [Times: user=0.01 sys=0.01, real=0.01 secs]
Heap
 def new generation   total 9216K, used 4682K [0x00000000fec00000, 0x00000000ff600000, 0x00000000ff600000)
  eden space 8192K,  54% used [0x00000000fec00000, 0x00000000ff052050, 0x00000000ff400000)
  from space 1024K,  25% used [0x00000000ff500000, 0x00000000ff5409f0, 0x00000000ff600000)
  to   space 1024K,   0% used [0x00000000ff400000, 0x00000000ff400000, 0x00000000ff500000)
 tenured generation   total 10240K, used 6144K [0x00000000ff600000, 0x0000000100000000, 0x0000000100000000)
   the space 10240K,  60% used [0x00000000ff600000, 0x00000000ffc00030, 0x00000000ffc00200, 0x0000000100000000)
 Metaspace       used 2482K, capacity 4486K, committed 4864K, reserved 1056768K
  class space    used 267K, capacity 386K, committed 512K, reserved 1048576K
</code></pre>
</li>
<li>创建 allocation1, allocation2, allocation3，均是2M,所以eden区域放大下，总共占用6M，剩下2M。</li>
<li>创建 allocation4时由于，4M比新生区剩下的可存放数据大小要大，2M+1M&lt;4M。所以出一次minorGC，</li>
<li>由于survivor区域=1M大小，容纳不下。所以allocation1, allocation2, allocation3只能通过 <strong>分配担保机制</strong> 转移到老年代，所以 the space 10240K,  60% used</li>
<li>eden空间minorGC后，有足够的内存空间，所以 allocation4 会分配到 eden区域，所以 eden space 8192K,  54% used。</li>
</ol>
</li>
<li>-XX:+UseParallelGC 使用Parallel Scavenge收集器
<ol>
<li>结果如下</li>
</ol>
<pre><code>Heap
 PSYoungGen      total 9216K, used 6979K [0x00000000ff600000, 0x0000000100000000, 0x0000000100000000)
  eden space 8192K, 85% used [0x00000000ff600000,0x00000000ffcd0f30,0x00000000ffe00000)
  from space 1024K, 0% used [0x00000000fff00000,0x00000000fff00000,0x0000000100000000)
  to   space 1024K, 0% used [0x00000000ffe00000,0x00000000ffe00000,0x00000000fff00000)
 ParOldGen       total 10240K, used 4096K [0x00000000fec00000, 0x00000000ff600000, 0x00000000ff600000)
  object space 10240K, 40% used [0x00000000fec00000,0x00000000ff000010,0x00000000ff600000)
 Metaspace       used 2482K, capacity 4486K, committed 4864K, reserved 1056768K
  class space    used 267K, capacity 386K, committed 512K, reserved 1048576K
</code></pre>
<ol start="2">
<li>与serial收集器最显眼的结果就是，并没有发生minorGC导致allocation4分配到了老年代，而不是新生代。</li>
<li>也就是说，allocation1, allocation2, allocation3 分配后到eden后，当分配allocation4对象的时候，发现新生代剩余的空间已经不足以存放allocation4对象，所以该对象被分配在老年代。此时并没有发生GC</li>
</ol>
</li>
</ol>
<hr>
<h3 id="有趣的现象是">有趣的现象是</h3>
<p><strong>当把 allocation4 的大小 改成 3M后，Parallel Scavenge收集器的 会发生一次GC，</strong></p>
<pre><code>[root@xxx java_test]# java -verbose:gc -Xms20M -Xmx20M -Xmn10M -XX:+PrintGCDetails -XX:SurvivorRatio=8 -XX:+UseParallelGC  GcTest
[GC (Allocation Failure) [PSYoungGen: 6815K-&gt;320K(9216K)] 6815K-&gt;6464K(19456K), 0.0061027 secs] [Times: user=0.00 sys=0.00, real=0.00 secs] 
[Full GC (Ergonomics) [PSYoungGen: 320K-&gt;0K(9216K)] [ParOldGen: 6144K-&gt;6401K(10240K)] 6464K-&gt;6401K(19456K), [Metaspace: 2476K-&gt;2476K(1056768K)], 0.0031611 secs] [Times: user=0.00 sys=0.00, real=0.00 secs] 
Heap
 PSYoungGen      total 9216K, used 3154K [0x00000000ff600000, 0x0000000100000000, 0x0000000100000000)
  eden space 8192K, 38% used [0x00000000ff600000,0x00000000ff914930,0x00000000ffe00000)
  from space 1024K, 0% used [0x00000000ffe00000,0x00000000ffe00000,0x00000000fff00000)
  to   space 1024K, 0% used [0x00000000fff00000,0x00000000fff00000,0x0000000100000000)
 ParOldGen       total 10240K, used 6401K [0x00000000fec00000, 0x00000000ff600000, 0x00000000ff600000)
  object space 10240K, 62% used [0x00000000fec00000,0x00000000ff240640,0x00000000ff600000)
 Metaspace       used 2482K, capacity 4486K, committed 4864K, reserved 1056768K
  class space    used 267K, capacity 386K, committed 512K, reserved 1048576K
</code></pre>
<h2 id="由上面的gc日志可以看出最后结果发生一次minorgc和一次fullgc并且是-ergonomics并且-allocation1-allocation2-allocation3-到了老年代allocation4-分配到了-eden-然后再次将-allocation4改成5m的大小后结果是和4m一致的-eden8m只有-4m以上才将新的对象分配到老年代而不是触发minorgc-母鸡点解咯">由上面的GC日志可以看出最后结果，发生一次minorGC和一次FullGC（并且是 Ergonomics），并且 allocation1, allocation2, allocation3 到了老年代，allocation4 分配到了 eden。<br>
然后再次将 allocation4改成5M的大小后，结果是和4M一致的。eden=8M，只有 4M以上才将新的对象分配到老年代，而不是触发minorGC。<s>母鸡点解咯！</s></h2>
<p><img src="https://image.runbarry.com/0aa15db02aad4faf8e5186bdc80677d7" alt="微信图片_20190823172914.png" loading="lazy"><br>
不是很理解，刚好通过 搜索 <strong>Full GC (Ergonomics)</strong>，找到一片文章的解释<br>
原文链接如下：<a href="https://cloud.tencent.com/developer/article/1082687">请戳</a>，<br>
并且这位大佬已经写过类似的文章了：<a href="https://mp.weixin.qq.com/s?__biz=MzA5MzQ2NTY0OA==&amp;mid=2650797224&amp;idx=1&amp;sn=5819bd097e6dabab34db382be2d0182c&amp;chksm=885629f7bf21a0e1fe382626f8d272ee9c4066109f329ef93a205c29e37e9376f455c1710903&amp;scene=21#wechat_redirect">请戳</a><br>
结论：<br>
内存分配是在JVM在内存分配的时候，新生代内存不足时，把新生代的存活的对象搬到老生代，然后新生代腾出来的空间用于为分配给最新的对象。这里老生代是担保人。在不同的GC机制下，也就是不同垃圾回收器组合下，担保机制也略有不同。在Serial+Serial Old的情况下，发现放不下就直接启动担保机制；在Parallel Scavenge+Serial Old的情况下，却是先要去判断一下要分配的内存是不是&gt;=Eden区大小的一半，如果是那么直接把该对象放入老生代，否则才会启动担保机制。</p>
<hr>
<h1 id="总结">总结</h1>
<p>jvm的知识还是太薄弱，看书虽好，但是不手动操作一次，很多问题没法发现。以前看《深入理解Java虚拟机JVM高级特性与最佳实践》看完基本当没看，就是因为懒，只是纸上谈兵。</p>
]]></content>
    </entry>
</feed>